name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Generate Unique Database Name
        id: unique_db_name
        run: echo "TEST_DATABASE_NAME=mytestdb_${{ github.run_number }}_${{ github.run_id }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          export RUNNING_TESTS=True
          python manage.py test
        env:
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}

      - name: Clean up Test Database
        if: always()
        run: |
          psql -U ${{ secrets.DATABASE_USER }} -h localhost -c "DROP DATABASE IF EXISTS ${{ secrets.DATABASE_NAME }}"
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}
